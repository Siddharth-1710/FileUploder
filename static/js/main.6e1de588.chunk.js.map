{"version":3,"sources":["firebase.js","component/Uploader.js","App.js","reportWebVitals.js","index.js"],"names":["app","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","storage","getStorage","Uploader","_useState","useState","_useState2","_slicedToArray","fileUpload","setFileUpload","_useState3","_useState4","errorMessage","setErrorMessage","_useState5","_useState6","fileList","setFileList","fileListRef","ref","useEffect","listAll","then","response","promises","items","map","item","getDownloadURL","url","name","Promise","all","result","catch","error","console","React","createElement","className","type","accept","onChange","event","file","target","files","fileExtension","split","pop","includes","toLowerCase","value","MdCloudUpload","onClick","fileName","uuidv4","fileRef","concat","uploadBytes","alert","length","key","href","download","App","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.6e1de588.chunk.js","sourcesContent":["// Import the functions you need from the SDKs you need\r\nimport { initializeApp } from \"firebase/app\";\r\nimport { getStorage } from 'firebase/storage'\r\n// TODO: Add SDKs for Firebase products that you want to use\r\n// https://firebase.google.com/docs/web/setup#available-libraries\r\n\r\n// Your web app's Firebase configuration\r\nconst firebaseConfig = {\r\n  apiKey: \"AIzaSyDpywPFafP9KnogWNEPMAoJrfJmLkVlNK8\",\r\n  authDomain: \"fileuploader-22120.firebaseapp.com\",\r\n  projectId: \"fileuploader-22120\",\r\n  storageBucket: \"fileuploader-22120.appspot.com\",\r\n  messagingSenderId: \"1073647548495\",\r\n  appId: \"1:1073647548495:web:00803fa9fce91fceca923a\"\r\n};\r\n\r\n// Initialize Firebase\r\nconst app = initializeApp(firebaseConfig);\r\n\r\nexport const storage = getStorage(app);","import React, { useState, useEffect } from 'react';\r\nimport { storage } from '../firebase';\r\nimport { MdCloudUpload } from 'react-icons/md';\r\nimport { ref, uploadBytes, listAll, getDownloadURL } from 'firebase/storage';\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport './Uploader.css';\r\n\r\nfunction Uploader() {\r\n  const [fileUpload, setFileUpload] = useState(null);\r\n  const [errorMessage, setErrorMessage] = useState('');\r\n  const [fileList, setFileList] = useState([]);\r\n\r\n  const fileListRef = ref(storage, 'files/');\r\n\r\n  const handleFileChange = (event) => {\r\n    const file = event.target.files[0];\r\n\r\n    if (file) {\r\n      const fileExtension = file.name.split('.').pop();\r\n      const allowedExtensions = ['pdf', 'doc'];\r\n\r\n      if (allowedExtensions.includes(fileExtension.toLowerCase())) {\r\n        setFileUpload(file);\r\n        setErrorMessage('');\r\n      } else {\r\n        event.target.value = null;\r\n        setFileUpload(null);\r\n        setErrorMessage('Invalid file format. Please upload only PDF or DOC files.');\r\n      }\r\n    }\r\n  };\r\n\r\n  const uploadFile = () => {\r\n    if (fileUpload === null) return;\r\n\r\n    const fileName = fileUpload.name + uuidv4();\r\n    const fileRef = ref(storage, `files/${fileName}`);\r\n    uploadBytes(fileRef, fileUpload).then(() => {\r\n      alert('File uploaded successfully');\r\n      setFileUpload(null);\r\n    });\r\n  };\r\n\r\n  const handleRemoveFile = () => {\r\n    setFileUpload(null);\r\n    setErrorMessage('');\r\n  };\r\n\r\n  useEffect(() => {\r\n    listAll(fileListRef)\r\n      .then((response) => {\r\n        const promises = response.items.map((item) => {\r\n          return getDownloadURL(item).then((url) => {\r\n            return { url, name: item.name };\r\n          });\r\n        });\r\n        Promise.all(promises)\r\n          .then((result) => {\r\n            setFileList(result);\r\n          })\r\n          .catch((error) => {\r\n            console.error('Error getting download URLs:', error);\r\n          });\r\n      })\r\n      .catch((error) => {\r\n        console.error('Error listing files:', error);\r\n      });\r\n  }, []);\r\n\r\n  return (\r\n    <main>\r\n      <div className=\"file-uploader\">\r\n        <label className=\"file-uploader__label\">\r\n          <input\r\n            type=\"file\"\r\n            accept=\".pdf,.doc\"\r\n            className=\"file-uploader__input\"\r\n            onChange={handleFileChange}\r\n          />\r\n          <span className=\"file-uploader__icon\">\r\n          <MdCloudUpload />\r\n          </span>\r\n          <span className=\"file-uploader__text\">{fileUpload ? fileUpload.name : 'Choose a file'}</span>\r\n        </label>\r\n        {errorMessage && (\r\n          <div className=\"file-uploader__error\">\r\n            <p>{errorMessage}</p>\r\n            <button className=\"file-uploader__remove-btn\" onClick={handleRemoveFile}>\r\n              Remove File\r\n            </button>\r\n          </div>\r\n        )}\r\n        <button className=\"file-uploader__upload-btn\" onClick={uploadFile}>\r\n          Upload\r\n        </button>\r\n      </div>\r\n\r\n      {fileList.length > 0 && (\r\n        <div className=\"file-uploader__file-list\">\r\n          <h3>Uploaded Files:</h3>\r\n          <table className=\"file-uploader__table\">\r\n            <thead>\r\n              <tr>\r\n                <th>File Name</th>\r\n                <th>Download</th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              {fileList.map((file) => (\r\n                <tr key={file.url}>\r\n                  <td>{file.name}</td>\r\n                  <td>\r\n                    <a href={file.url} download={file.name}>\r\n                      Download\r\n                    </a>\r\n                  </td>\r\n                </tr>\r\n              ))}\r\n            </tbody>\r\n          </table>\r\n        </div>\r\n      )}\r\n    </main>\r\n  );\r\n}\r\n\r\nexport default Uploader;\r\n","import React from 'react';\nimport './App.css';\nimport Uploader from './component/Uploader';\n\nfunction App() {\n  return (\n    <Uploader>\n\n    </Uploader>\n    \n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}